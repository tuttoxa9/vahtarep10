// –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
require('dotenv').config();

async function testTelegramNotification() {
  console.log('üîç === DEBUGGING TELEGRAM NOTIFICATION ISSUE ===');

  // Test data - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π ID –≤–∞–∫–∞–Ω—Å–∏–∏
  const testData = {
    vacancyId: 'test-vacancy-id',
    applicantName: '–¢–µ—Å—Ç–æ–≤—ã–π –°–æ–∏—Å–∫–∞—Ç–µ–ª—å',
    applicantPhone: '+79001234567',
    applicantEmail: 'test@example.com',
    message: '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'
  };

  console.log('üìã Test data:', testData);

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    console.log('\nüîß Environment variables check:');
    console.log('  - TELEGRAM_BOT_TOKEN:', process.env.TELEGRAM_BOT_TOKEN ? '‚úÖ SET' : '‚ùå NOT SET');
    console.log('  - TELEGRAM_CHAT_ID:', process.env.TELEGRAM_CHAT_ID ? '‚úÖ SET' : '‚ùå NOT SET');
    console.log('  - Firebase API Key:', process.env.NEXT_PUBLIC_FIREBASE_API_KEY ? '‚úÖ SET' : '‚ùå NOT SET');
    console.log('  - Firebase Project ID:', process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID ? '‚úÖ SET' : '‚ùå NOT SET');

    // === FIREBASE TEST ===
    console.log('\nüî• === TESTING FIREBASE CONNECTION ===');

    let vacancyTitle = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≤–∞–∫–∞–Ω—Å–∏—è';
    let vacancyCompany = '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
    let vacancyLocation = '–ù–µ —É–∫–∞–∑–∞–Ω–æ';

    try {
      // –ü—Ä–æ–≤–µ—Ä–∏–º Firebase –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
      const firebaseConfig = {
        apiKey: process.env.NEXT_PUBLIC_FIREBASE_API_KEY,
        authDomain: process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN,
        projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,
        storageBucket: process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET,
        messagingSenderId: process.env.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID,
        appId: process.env.NEXT_PUBLIC_FIREBASE_APP_ID
      };

      if (firebaseConfig.apiKey && firebaseConfig.authDomain && firebaseConfig.projectId) {
        console.log('‚úÖ Firebase config is complete');

        // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Firebase –º–æ–¥—É–ª–∏
        const { initializeApp } = await import('firebase/app');
        const { getFirestore, collection, getDocs, doc, getDoc, limit, query } = await import('firebase/firestore');

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Firebase
        const app = initializeApp(firebaseConfig);
        const db = getFirestore(app);

        console.log('‚úÖ Firebase initialized successfully');

        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        console.log('\nüìã Fetching all vacancies for debugging...');
        const vacanciesQuery = query(collection(db, 'vacancies'), limit(10));
        const querySnapshot = await getDocs(vacanciesQuery);

        console.log(`üìã Found ${querySnapshot.size} vacancies in collection:`);

        let firstVacancyId = null;
        querySnapshot.forEach((doc) => {
          const data = doc.data();
          console.log(`  - ID: ${doc.id}`);
          console.log(`    Title: ${data.title || 'No title'}`);
          console.log(`    Company: ${data.company || 'No company'}`);
          console.log(`    Location: ${data.location || 'No location'}`);
          console.log('    ---');

          if (!firstVacancyId) {
            firstVacancyId = doc.id;
          }
        });

        // –ï—Å–ª–∏ –µ—Å—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–≤—É—é
        if (firstVacancyId) {
          console.log(`\nüîç Testing vacancy fetch with real ID: ${firstVacancyId}`);
          testData.vacancyId = firstVacancyId;

          const vacancyRef = doc(db, 'vacancies', firstVacancyId);
          const vacancySnap = await getDoc(vacancyRef);

          if (vacancySnap.exists()) {
            const vacancyData = vacancySnap.data();
            vacancyTitle = vacancyData.title || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≤–∞–∫–∞–Ω—Å–∏—è';
            vacancyCompany = vacancyData.company || '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
            vacancyLocation = vacancyData.location || '–ù–µ —É–∫–∞–∑–∞–Ω–æ';

            console.log('‚úÖ Successfully fetched vacancy:');
            console.log(`  - Title: ${vacancyTitle}`);
            console.log(`  - Company: ${vacancyCompany}`);
            console.log(`  - Location: ${vacancyLocation}`);
          } else {
            console.log('‚ùå Vacancy document not found');
          }
        } else {
          console.log('‚ö†Ô∏è No vacancies found in the collection');
        }

      } else {
        console.log('‚ùå Firebase config incomplete, using default values');
      }
    } catch (firebaseError) {
      console.error('‚ùå Firebase error:', firebaseError.message);
    }

    // === TELEGRAM TEST ===
    console.log('\nüì± === TESTING TELEGRAM NOTIFICATION ===');

    if (process.env.TELEGRAM_BOT_TOKEN && process.env.TELEGRAM_CHAT_ID) {
      const applicationId = 'test_' + Date.now();

      const telegramMessage = `üîî *–¢–ï–°–¢–û–í–û–ï —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ - –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é!*

üìã *–í–∞–∫–∞–Ω—Å–∏—è:* ${vacancyTitle}
üè¢ *–ö–æ–º–ø–∞–Ω–∏—è:* ${vacancyCompany}
üìç *–õ–æ–∫–∞—Ü–∏—è:* ${vacancyLocation}
üÜî *ID –≤–∞–∫–∞–Ω—Å–∏–∏:* ${testData.vacancyId}

üë§ *–°–æ–∏—Å–∫–∞—Ç–µ–ª—å:*
‚Ä¢ –ò–º—è: ${testData.applicantName}
‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: ${testData.applicantPhone}
‚Ä¢ Email: ${testData.applicantEmail || '–Ω–µ —É–∫–∞–∑–∞–Ω'}
‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–µ: ${testData.message || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}

üÜî ID –∑–∞—è–≤–∫–∏: ${applicationId}
‚è∞ –î–∞—Ç–∞ –ø–æ–¥–∞—á–∏: ${new Date().toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' })}

*–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏*`;

      console.log('üì± Sending test message to Telegram...');
      console.log('üì± Message content:');
      console.log(telegramMessage);

      const telegramResponse = await fetch(`https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/sendMessage`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: process.env.TELEGRAM_CHAT_ID,
          text: telegramMessage,
          parse_mode: 'Markdown',
        })
      });

      const telegramResult = await telegramResponse.text();
      console.log('üì± Telegram response status:', telegramResponse.status);
      console.log('üì± Telegram response body:', telegramResult);

      if (telegramResponse.ok) {
        console.log('‚úÖ Test Telegram notification sent successfully!');
      } else {
        console.error('‚ùå Telegram API error:', telegramResult);
      }
    } else {
      console.log('‚ùå Telegram credentials not configured');
    }

  } catch (error) {
    console.error('üí• Error in test:', error.message);
    console.error('Stack:', error.stack);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testTelegramNotification();
