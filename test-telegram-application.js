const http = require('http');

// –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å —Ä–µ–∞–ª—å–Ω–æ–π –≤–∞–∫–∞–Ω—Å–∏–µ–π
const testVacancyId = '0rUlJ5PAJUi44RwOqFyu'; // ID –ø–µ—Ä–≤–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏ –∏–∑ —Å–ø–∏—Å–∫–∞

async function testSubmitApplication() {
  return new Promise((resolve, reject) => {
    const testData = {
      vacancyId: testVacancyId,
      applicantName: '–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ò–≤–∞–Ω',
      applicantPhone: '+79001234567',
      applicantEmail: 'ivan.test@example.com',
      message: '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π. –î–æ–ª–∂–Ω—ã –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏.'
    };

    const postData = JSON.stringify(testData);

    const options = {
      hostname: 'localhost',
      port: 3000,
      path: '/api/submit-application',
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Content-Length': Buffer.byteLength(postData)
      }
    };

    console.log('üìß –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞—è–≤–∫—É...');
    console.log('üéØ Vacancy ID:', testVacancyId);
    console.log('üë§ Applicant:', testData.applicantName);
    console.log('');

    const req = http.request(options, (res) => {
      let data = '';
      res.on('data', (chunk) => {
        data += chunk;
      });
      res.on('end', () => {
        try {
          const result = JSON.parse(data);
          resolve(result);
        } catch (error) {
          reject(error);
        }
      });
    });

    req.on('error', (error) => {
      reject(error);
    });

    req.write(postData);
    req.end();
  });
}

async function main() {
  try {
    console.log('üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –∑–∞—è–≤–∫–∏ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –≤–∞–∫–∞–Ω—Å–∏–∏...\n');

    const result = await testSubmitApplication();

    console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏:');
    console.log('Success:', result.success);
    console.log('Application ID:', result.applicationId);
    console.log('Telegram sent:', result.telegramSent);

    if (result.vacancyDetails) {
      console.log('\nüìã –î–∞–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–ª—è Telegram:');
      console.log('Title:', result.vacancyDetails.vacancyTitle);
      console.log('Company:', result.vacancyDetails.vacancyCompany);
      console.log('Location:', result.vacancyDetails.vacancyLocation);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      if (result.vacancyDetails.vacancyTitle === '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≤–∞–∫–∞–Ω—Å–∏—è' ||
          result.vacancyDetails.vacancyCompany === '–ù–µ —É–∫–∞–∑–∞–Ω–æ' ||
          result.vacancyDetails.vacancyLocation === '–ù–µ —É–∫–∞–∑–∞–Ω–æ') {
        console.log('\n‚ùå –ü–†–û–ë–õ–ï–ú–ê: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é!');
        console.log('–≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –æ –≤–∞–∫–∞–Ω—Å–∏–∏ –Ω–µ –±—ã–ª–∏ –ø–æ–ª—É—á–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.');
      } else {
        console.log('\n‚úÖ –£–°–ü–ï–•: –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ –≤–∞–∫–∞–Ω—Å–∏–∏ –ø–æ–ª—É—á–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!');
      }
    } else {
      console.log('\n‚ùå –î–∞–Ω–Ω—ã–µ –æ –≤–∞–∫–∞–Ω—Å–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –æ—Ç–≤–µ—Ç–µ');
    }

    console.log('\nüìù –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç:');
    console.log(JSON.stringify(result, null, 2));

    console.log('\nüìä –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞ –≤—ã—à–µ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–∏.');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    console.error('Stack:', error.stack);
  }
}

main();
