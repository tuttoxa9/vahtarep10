const http = require('http');

const baseUrl = 'http://localhost:3000';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –≤–∞–∫–∞–Ω—Å–∏–π
async function getAllVacancies() {
  return new Promise((resolve, reject) => {
    const options = {
      hostname: 'localhost',
      port: 3000,
      path: '/api/vacancies',
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
      }
    };

    const req = http.request(options, (res) => {
      let data = '';
      res.on('data', (chunk) => {
        data += chunk;
      });
      res.on('end', () => {
        try {
          resolve(JSON.parse(data));
        } catch (error) {
          reject(error);
        }
      });
    });

    req.on('error', (error) => {
      reject(error);
    });

    req.end();
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏
async function getVacancyById(id) {
  return new Promise((resolve, reject) => {
    const options = {
      hostname: 'localhost',
      port: 3000,
      path: `/api/vacancies/${id}`,
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
      }
    };

    const req = http.request(options, (res) => {
      let data = '';
      res.on('data', (chunk) => {
        data += chunk;
      });
      res.on('end', () => {
        try {
          resolve(JSON.parse(data));
        } catch (error) {
          reject(error);
        }
      });
    });

    req.on('error', (error) => {
      reject(error);
    });

    req.end();
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏
async function testSubmitApplication(vacancyId) {
  return new Promise((resolve, reject) => {
    const testData = {
      vacancyId: vacancyId,
      applicantName: '–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
      applicantPhone: '+79001234567',
      applicantEmail: 'test@example.com',
      message: '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏'
    };

    const postData = JSON.stringify(testData);

    const options = {
      hostname: 'localhost',
      port: 3000,
      path: '/api/submit-application',
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Content-Length': Buffer.byteLength(postData)
      }
    };

    const req = http.request(options, (res) => {
      let data = '';
      res.on('data', (chunk) => {
        data += chunk;
      });
      res.on('end', () => {
        try {
          resolve(JSON.parse(data));
        } catch (error) {
          reject(error);
        }
      });
    });

    req.on('error', (error) => {
      reject(error);
    });

    req.write(postData);
    req.end();
  });
}

async function main() {
  try {
    console.log('üîç –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–∞–∫–∞–Ω—Å–∏–π...');
    const vacancies = await getAllVacancies();

    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ –≤–∞–∫–∞–Ω—Å–∏–π: ${vacancies.length}`);

    if (vacancies.length > 0) {
      const firstVacancy = vacancies[0];
      console.log('\nüéØ –ü–µ—Ä–≤–∞—è –≤–∞–∫–∞–Ω—Å–∏—è:');
      console.log('ID:', firstVacancy.id);
      console.log('Title:', firstVacancy.title);
      console.log('Company:', firstVacancy.company);
      console.log('Location:', firstVacancy.location);
      console.log('Full data:', JSON.stringify(firstVacancy, null, 2));

      console.log('\nüîç –ü–æ–ª—É—á–∞–µ–º —ç—Ç—É –∂–µ –≤–∞–∫–∞–Ω—Å–∏—é –ø–æ ID...');
      const vacancyById = await getVacancyById(firstVacancy.id);
      console.log('üìã –í–∞–∫–∞–Ω—Å–∏—è –ø–æ ID:');
      console.log('Title:', vacancyById.title);
      console.log('Company:', vacancyById.company);
      console.log('Location:', vacancyById.location);

      console.log('\nüìß –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –∑–∞—è–≤–∫–∏...');
      const applicationResult = await testSubmitApplication(firstVacancy.id);
      console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏:');
      console.log(JSON.stringify(applicationResult, null, 2));

    } else {
      console.log('‚ùå –í–∞–∫–∞–Ω—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!');
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  }
}

main();
