exports.handler = async (event, context) => {
  // CORS headers
  const headers = {
    'Access-Control-Allow-Origin': '*',
    'Access-Control-Allow-Headers': 'Content-Type',
    'Access-Control-Allow-Methods': 'POST, OPTIONS'
  };

  // Handle OPTIONS (preflight)
  if (event.httpMethod === 'OPTIONS') {
    return {
      statusCode: 200,
      headers,
      body: ''
    };
  }

  // Only allow POST
  if (event.httpMethod !== 'POST') {
    return {
      statusCode: 405,
      headers,
      body: JSON.stringify({ error: 'Method not allowed' })
    };
  }

  try {
    console.log('=== SUBMIT APPLICATION FUNCTION STARTED ===');
    console.log('Function execution time:', new Date().toISOString());
    console.log('Event body received:', event.body);

    // Parse request body
    let requestData;
    try {
      requestData = JSON.parse(event.body || '{}');
      console.log('‚úÖ Request body parsed successfully');
    } catch (parseError) {
      console.error('‚ùå JSON parse error:', parseError);
      return {
        statusCode: 400,
        headers,
        body: JSON.stringify({ error: 'Invalid JSON in request body' })
      };
    }

    const { vacancyId, applicantName, applicantPhone, applicantEmail, message } = requestData;
    console.log('üìã Request data extracted:', {
      vacancyId,
      applicantName,
      applicantPhone,
      applicantEmail: applicantEmail || 'not provided',
      message: message || 'not provided'
    });

    // Validate required fields
    if (!vacancyId || !applicantName || !applicantPhone) {
      console.error('‚ùå Validation failed - missing required fields');
      return {
        statusCode: 400,
        headers,
        body: JSON.stringify({
          error: 'Missing required fields: vacancyId, applicantName, applicantPhone'
        })
      };
    }

    console.log('‚úÖ Validation passed');

    // Generate application ID
    const applicationId = 'app_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
    console.log('üÜî Generated application ID:', applicationId);

    // === GET VACANCY DETAILS FOR TELEGRAM ===
    let vacancyTitle = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≤–∞–∫–∞–Ω—Å–∏—è';
    let vacancyCompany = '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
    let vacancyLocation = '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
    let vacancySalary = '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
    let vacancyFetchSuccess = false;

    console.log('üîç === FETCHING VACANCY DETAILS ===');
    console.log('üîç Trying to fetch vacancy with ID:', vacancyId);

    try {
      // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Å–ø–æ—Å–æ–±: –∏—Å–ø–æ–ª—å–∑—É–µ–º API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –≤–∞–∫–∞–Ω—Å–∏–∏
      console.log('üîç Fetching vacancy details via API endpoint...');

      const apiUrl = `https://${event.headers.host}/api/vacancies/${vacancyId}`;
      console.log('üîç API URL:', apiUrl);

      const apiResponse = await fetch(apiUrl, {
        method: 'GET',
        headers: {
          'Accept': 'application/json'
        }
      });

      console.log('üîç API Response status:', apiResponse.status);

      if (apiResponse.ok) {
        const vacancyData = await apiResponse.json();
        console.log('üìã Vacancy data received from API:', JSON.stringify(vacancyData, null, 2));

        if (vacancyData && vacancyData.id) {
          // –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ –≤–∞–∫–∞–Ω—Å–∏–∏
          vacancyTitle = vacancyData.title || vacancyData.name || vacancyData.position || '–í–∞–∫–∞–Ω—Å–∏—è –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è';
          vacancyCompany = vacancyData.company || vacancyData.companyName || vacancyData.employer || '–ö–æ–º–ø–∞–Ω–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞';
          vacancyLocation = vacancyData.location || vacancyData.city || vacancyData.address || '–õ–æ–∫–∞—Ü–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞';

          // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—Ä–ø–ª–∞—Ç—ã
          if (vacancyData.salary) {
            if (typeof vacancyData.salary === 'object') {
              const min = vacancyData.salary.min || '';
              const max = vacancyData.salary.max || '';
              const currency = vacancyData.salary.currency || '—Ä—É–±';
              if (min && max) {
                vacancySalary = `${min} - ${max} ${currency}`;
              } else if (min) {
                vacancySalary = `–æ—Ç ${min} ${currency}`;
              } else if (max) {
                vacancySalary = `–¥–æ ${max} ${currency}`;
              }
            } else {
              vacancySalary = vacancyData.salary.toString();
            }
          }

          vacancyFetchSuccess = true;

          console.log('‚úÖ Vacancy details fetched successfully via API:');
          console.log('  - Title:', vacancyTitle);
          console.log('  - Company:', vacancyCompany);
          console.log('  - Location:', vacancyLocation);
          console.log('  - Salary:', vacancySalary);
        } else {
          console.warn('‚ö†Ô∏è API returned empty or invalid vacancy data');
        }
      } else {
        console.warn('‚ö†Ô∏è API endpoint failed with status:', apiResponse.status);
        const errorText = await apiResponse.text();
        console.warn('‚ö†Ô∏è API error response:', errorText);
      }
    } catch (vacancyError) {
      console.error('‚ùå Error fetching vacancy details via API:');
      console.error('  - Error message:', vacancyError.message);
      console.error('  - Error stack:', vacancyError.stack);
    }

    // === FIREBASE SAVE OPERATION ===
    let firebaseSaved = false;
    let firebaseDocId = null;
    let firebaseError = null;

    console.log('üî• === STARTING FIREBASE OPERATION ===');

    try {
      // Check Firebase environment variables
      const firebaseConfig = {
        apiKey: process.env.NEXT_PUBLIC_FIREBASE_API_KEY,
        authDomain: process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN,
        projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,
        storageBucket: process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET,
        messagingSenderId: process.env.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID,
        appId: process.env.NEXT_PUBLIC_FIREBASE_APP_ID
      };

      console.log('üîß Firebase config validation:');
      console.log('  - API Key:', firebaseConfig.apiKey ? '‚úÖ SET' : '‚ùå NOT SET');
      console.log('  - Auth Domain:', firebaseConfig.authDomain ? '‚úÖ SET' : '‚ùå NOT SET');
      console.log('  - Project ID:', firebaseConfig.projectId ? '‚úÖ SET' : '‚ùå NOT SET');
      console.log('  - Storage Bucket:', firebaseConfig.storageBucket ? '‚úÖ SET' : '‚ùå NOT SET');
      console.log('  - Messaging Sender ID:', firebaseConfig.messagingSenderId ? '‚úÖ SET' : '‚ùå NOT SET');
      console.log('  - App ID:', firebaseConfig.appId ? '‚úÖ SET' : '‚ùå NOT SET');

      // Check if all required config is present
      if (!firebaseConfig.apiKey || !firebaseConfig.authDomain || !firebaseConfig.projectId) {
        throw new Error('Missing critical Firebase configuration');
      }

      console.log('‚úÖ Firebase config validation passed');

      // Import Firebase modules
      console.log('üì¶ Importing Firebase modules...');
      const { initializeApp, getApps, getApp } = await import('firebase/app');
      const { getFirestore, collection, addDoc, Timestamp } = await import('firebase/firestore');
      console.log('‚úÖ Firebase modules imported successfully');

      // Initialize Firebase app (reuse existing if available)
      let app;
      const existingApps = getApps();
      if (existingApps.length === 0) {
        console.log('üöÄ Initializing new Firebase app...');
        app = initializeApp(firebaseConfig);
        console.log('‚úÖ New Firebase app initialized');
      } else {
        console.log('üîÑ Using existing Firebase app');
        app = getApp();
      }

      // Initialize Firestore
      console.log('üóÑÔ∏è Initializing Firestore...');
      const db = getFirestore(app);
      console.log('‚úÖ Firestore initialized successfully');

      // Prepare application data
      const applicationData = {
        vacancyId,
        applicantName,
        applicantPhone,
        applicantEmail: applicantEmail || '',
        message: message || '',
        createdAt: Timestamp.now(),
        status: 'new',
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞–∫–∞–Ω—Å–∏–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
        vacancyTitle: vacancyTitle,
        vacancyCompany: vacancyCompany,
        vacancyLocation: vacancyLocation,
        vacancyFetchSuccess: vacancyFetchSuccess
      };

      console.log('üìù Application data prepared:', {
        vacancyId: applicationData.vacancyId,
        applicantName: applicationData.applicantName,
        applicantPhone: applicationData.applicantPhone,
        applicantEmail: applicationData.applicantEmail,
        message: applicationData.message,
        status: applicationData.status,
        vacancyTitle: applicationData.vacancyTitle,
        vacancyCompany: applicationData.vacancyCompany,
        vacancyLocation: applicationData.vacancyLocation,
        vacancyFetchSuccess: applicationData.vacancyFetchSuccess,
        createdAt: 'Timestamp object'
      });

      // Save to Firestore (NO TIMEOUT - let it complete naturally)
      console.log('üíæ Saving to Firestore collection "applications"...');
      const docRef = await addDoc(collection(db, 'applications'), applicationData);
      firebaseDocId = docRef.id;
      firebaseSaved = true;

      console.log('‚úÖ SUCCESS! Application saved to Firestore');
      console.log('  - Document ID:', firebaseDocId);
      console.log('  - Collection: applications');
      console.log('  - Save timestamp:', new Date().toISOString());

    } catch (error) {
      firebaseError = error;
      console.error('‚ùå FIREBASE SAVE FAILED:');
      console.error('  - Error message:', error.message);
      console.error('  - Error code:', error.code);
      console.error('  - Error stack:', error.stack);

      // Additional Firebase-specific error details
      if (error.code) {
        console.error('  - Firebase error code:', error.code);
      }
      if (error.customData) {
        console.error('  - Firebase custom data:', error.customData);
      }
    }

    console.log('üî• === FIREBASE OPERATION COMPLETED ===');
    console.log('  - Status:', firebaseSaved ? '‚úÖ SUCCESS' : '‚ùå FAILED');
    console.log('  - Document ID:', firebaseDocId || 'none');

    // === TELEGRAM NOTIFICATION ===
    let telegramSent = false;
    const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
    const TELEGRAM_CHAT_ID = process.env.TELEGRAM_CHAT_ID;

    console.log('üì± === STARTING TELEGRAM NOTIFICATION ===');

    if (TELEGRAM_BOT_TOKEN && TELEGRAM_CHAT_ID) {
      try {
        console.log('üì± Telegram credentials found, sending notification...');

        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
        const vacancyStatusEmoji = vacancyFetchSuccess ? '‚úÖ' : '‚ö†Ô∏è';
        const vacancyStatusText = vacancyFetchSuccess ? '' : ' (–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)';

        const telegramMessage = `üîî *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é!*

üìã *–í–∞–∫–∞–Ω—Å–∏—è:* ${vacancyTitle}${vacancyStatusText}
üè¢ *–ö–æ–º–ø–∞–Ω–∏—è:* ${vacancyCompany}
üìç *–õ–æ–∫–∞—Ü–∏—è:* ${vacancyLocation}
üí∞ *–ó–∞—Ä–ø–ª–∞—Ç–∞:* ${vacancySalary}
üÜî *ID –≤–∞–∫–∞–Ω—Å–∏–∏:* ${vacancyId}
${vacancyStatusEmoji} *–°—Ç–∞—Ç—É—Å –¥–∞–Ω–Ω—ã—Ö:* ${vacancyFetchSuccess ? '–ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã' : '–î–∞–Ω–Ω—ã–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é'}

üë§ *–°–æ–∏—Å–∫–∞—Ç–µ–ª—å:*
‚Ä¢ –ò–º—è: ${applicantName}
‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: ${applicantPhone}
‚Ä¢ Email: ${applicantEmail || '–Ω–µ —É–∫–∞–∑–∞–Ω'}
‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–µ: ${message || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}

üÜî ID –∑–∞—è–≤–∫–∏: ${applicationId}
üìÑ Firebase Doc ID: ${firebaseDocId || '–Ω–µ —Å–æ–∑–¥–∞–Ω'}
üíæ –°—Ç–∞—Ç—É—Å –ë–î: ${firebaseSaved ? '‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ' : '‚ùå –ù–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ'}
${firebaseError ? `‚ùå –û—à–∏–±–∫–∞ –ë–î: ${firebaseError.message}` : ''}

‚è∞ –î–∞—Ç–∞ –ø–æ–¥–∞—á–∏: ${new Date().toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' })}`;

        console.log('üì± Sending message to Telegram...');
        const telegramResponse = await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            chat_id: TELEGRAM_CHAT_ID,
            text: telegramMessage,
            parse_mode: 'Markdown',
          })
        });

        const telegramResult = await telegramResponse.text();
        console.log('üì± Telegram response status:', telegramResponse.status);
        console.log('üì± Telegram response body:', telegramResult);

        if (telegramResponse.ok) {
          telegramSent = true;
          console.log('‚úÖ Telegram notification sent successfully');
        } else {
          console.error('‚ùå Telegram API error:', telegramResult);
        }
      } catch (telegramError) {
        console.error('‚ùå Telegram error:', telegramError.message);
        console.error('‚ùå Telegram error stack:', telegramError.stack);
      }
    } else {
      console.warn('‚ö†Ô∏è Telegram credentials not configured:');
      console.warn('  - Bot token:', TELEGRAM_BOT_TOKEN ? '‚úÖ SET' : '‚ùå NOT SET');
      console.warn('  - Chat ID:', TELEGRAM_CHAT_ID ? '‚úÖ SET' : '‚ùå NOT SET');
    }

    console.log('üì± === TELEGRAM NOTIFICATION COMPLETED ===');

    // === FINAL RESULTS ===
    console.log('üéØ === FUNCTION EXECUTION SUMMARY ===');
    console.log('  - Application ID:', applicationId);
    console.log('  - Vacancy fetch success:', vacancyFetchSuccess ? '‚úÖ YES' : '‚ùå NO');
    console.log('  - Vacancy title:', vacancyTitle);
    console.log('  - Vacancy company:', vacancyCompany);
    console.log('  - Vacancy location:', vacancyLocation);
    console.log('  - Firebase saved:', firebaseSaved ? '‚úÖ YES' : '‚ùå NO');
    console.log('  - Firebase doc ID:', firebaseDocId || 'none');
    console.log('  - Telegram sent:', telegramSent ? '‚úÖ YES' : '‚ùå NO');
    console.log('  - Execution time:', new Date().toISOString());
    console.log('=== FUNCTION COMPLETED SUCCESSFULLY ===');

    // Return success response
    return {
      statusCode: 200,
      headers,
      body: JSON.stringify({
        success: true,
        applicationId: applicationId,
        firebaseDocId: firebaseDocId,
        message: `Application submitted successfully${firebaseSaved ? ' and saved to database' : ' (database save failed)'}${telegramSent ? ' and notification sent' : ' (notification failed)'}`,
        debug: {
          vacancyFetchSuccess,
          vacancyTitle,
          vacancyCompany,
          vacancyLocation,
          firebaseSaved,
          firebaseDocId,
          telegramSent,
          firebaseError: firebaseError ? firebaseError.message : null
        }
      })
    };

  } catch (error) {
    console.error('üí• === CRITICAL FUNCTION ERROR ===');
    console.error('Error message:', error.message);
    console.error('Error stack:', error.stack);
    console.error('Error code:', error.code);
    console.error('=== ERROR DETAILS END ===');

    return {
      statusCode: 500,
      headers,
      body: JSON.stringify({
        error: 'Internal server error',
        details: error.message,
        timestamp: new Date().toISOString()
      })
    };
  }
};
