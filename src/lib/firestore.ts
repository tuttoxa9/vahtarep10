import {
  collection,
  doc,
  getDocs,
  getDoc,
  addDoc,
  updateDoc,
  deleteDoc,
  query,
  where,
  orderBy,
  limit,
  increment,
  Timestamp,
  type DocumentData,
  type QueryDocumentSnapshot
} from "firebase/firestore";
import { db } from "./firebase";
import type {
  Vacancy,
  Application,
  FirestoreVacancy,
  FirebaseTimestamp
} from "@/types";

// –ö–æ–ª–ª–µ–∫—Ü–∏–∏ Firestore
const COLLECTIONS = {
  VACANCIES: 'vacancies',
  APPLICATIONS: 'applications',
  COMPANIES: 'companies',
  ADMIN_USERS: 'adminUsers'
} as const;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è FirebaseTimestamp –≤ —Å—Ç—Ä–æ–∫—É ISO
function processVacancyForClient(vacancy: any): FirestoreVacancy {
  try {
    console.log('üîÑ Processing vacancy for client:', vacancy);
    const processedVacancy = { ...vacancy };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ createdAt
  if (vacancy.createdAt && typeof vacancy.createdAt.toDate === 'function') {
    processedVacancy.createdAt = vacancy.createdAt.toDate().toISOString();
  } else if (vacancy.createdAt && vacancy.createdAt.seconds) {
    processedVacancy.createdAt = new Date(vacancy.createdAt.seconds * 1000).toISOString();
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ updatedAt
  if (vacancy.updatedAt && typeof vacancy.updatedAt.toDate === 'function') {
    processedVacancy.updatedAt = vacancy.updatedAt.toDate().toISOString();
  } else if (vacancy.updatedAt && vacancy.updatedAt.seconds) {
    processedVacancy.updatedAt = new Date(vacancy.updatedAt.seconds * 1000).toISOString();
  }

    console.log('‚úÖ Processed vacancy result:', processedVacancy);
    return processedVacancy as FirestoreVacancy;
  } catch (error) {
    console.error('‚ùå Error processing vacancy for client:', error);
    return vacancy as FirestoreVacancy;
  }
}

// ==================== –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –°–ê–ô–¢–ê ====================

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
export async function getFeatures(): Promise<any[]> {
  try {
    const snapshot = await getDocs(collection(db, 'features'));
    return snapshot.docs.map(doc => ({
      id: doc.id,
      ...doc.data()
    }));
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤:', error);
    return [];
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –≤–∞–∫–∞–Ω—Å–∏–π
export async function getAllVacancies(): Promise<FirestoreVacancy[]> {
  try {
    // –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –±–µ–∑ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∏–Ω–¥–µ–∫—Å–æ–≤
    const snapshot = await getDocs(collection(db, COLLECTIONS.VACANCIES));
    const vacancies = snapshot.docs.map(doc => ({
      id: doc.id,
      ...doc.data()
    })).filter((vacancy: any) => vacancy.status === 'active' || !vacancy.status);

    return vacancies.map(processVacancyForClient);
  } catch (error) {
    console.error('Error fetching vacancies:', error);
    return [];
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –ø–æ ID
export async function getVacancyById(vacancyId: string): Promise<FirestoreVacancy | null> {
  try {
    console.log('üîç Firestore: Fetching vacancy with ID:', vacancyId);
    const docRef = doc(db, COLLECTIONS.VACANCIES, vacancyId);
    const docSnap = await getDoc(docRef);

    if (!docSnap.exists()) {
      console.warn('‚ö†Ô∏è Firestore: Document does not exist for ID:', vacancyId);
      return null;
    }

    console.log('üìÑ Firestore: Document exists, data:', docSnap.data());

    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
    try {
      await updateDoc(docRef, {
        viewCount: increment(1)
      });
      console.log('‚úÖ Firestore: View count incremented');
    } catch (updateError) {
      console.warn('‚ö†Ô∏è Firestore: Could not increment view count:', updateError);
    }

    const vacancy = {
      id: docSnap.id,
      ...docSnap.data()
    };

    console.log('üìã Firestore: Raw vacancy object:', vacancy);
    const processedVacancy = processVacancyForClient(vacancy);
    console.log('‚úÖ Firestore: Processed vacancy:', processedVacancy);

    return processedVacancy;
  } catch (error) {
    console.error('‚ùå Firestore: Error fetching vacancy by ID:', error);
    console.error('‚ùå Firestore: Error details:', error.message);
    console.error('‚ùå Firestore: Error stack:', error.stack);
    return null;
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –ø–æ ID –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–±–µ–∑ —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤)
export async function getVacancyForNotification(vacancyId: string): Promise<FirestoreVacancy | null> {
  try {
    console.log('üîî Notification: Fetching vacancy with ID:', vacancyId);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ID –Ω–µ –ø—É—Å—Ç–æ–π
    if (!vacancyId || vacancyId.trim() === '') {
      console.error('‚ùå Notification: Invalid vacancy ID provided:', vacancyId);
      return null;
    }

    const docRef = doc(db, COLLECTIONS.VACANCIES, vacancyId);
    console.log('üîî Notification: Document reference created for path:', `${COLLECTIONS.VACANCIES}/${vacancyId}`);

    const docSnap = await getDoc(docRef);
    console.log('üîî Notification: Document snapshot received, exists:', docSnap.exists());

    if (!docSnap.exists()) {
      console.warn('‚ö†Ô∏è Notification: Document does not exist for ID:', vacancyId);

      // –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ –≤–∞–∫–∞–Ω—Å–∏—é —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö –≤–∞–∫–∞–Ω—Å–∏–π
      try {
        console.log('üîÑ Notification: Attempting fallback search...');
        const allVacancies = await getAllVacancies();
        const foundVacancy = allVacancies.find(v => v.id === vacancyId);
        if (foundVacancy) {
          console.log('‚úÖ Notification: Found vacancy via fallback:', foundVacancy);
          return foundVacancy;
        }
        console.warn('‚ö†Ô∏è Notification: Vacancy not found in fallback search either');
      } catch (fallbackError) {
        console.error('‚ùå Notification: Fallback search failed:', fallbackError);
      }

      return null;
    }

    const rawData = docSnap.data();
    console.log('üìÑ Notification: Raw document data:', rawData);

    const vacancy = {
      id: docSnap.id,
      ...rawData
    };

    console.log('üìã Notification: Raw vacancy object:', vacancy);

    // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!vacancy.title && !vacancy.company && !vacancy.location) {
      console.warn('‚ö†Ô∏è Notification: Vacancy missing all main fields');
    }

    const processedVacancy = processVacancyForClient(vacancy);
    console.log('‚úÖ Notification: Processed vacancy:', processedVacancy);

    return processedVacancy;
  } catch (error) {
    console.error('‚ùå Notification: Error fetching vacancy by ID:', error);
    console.error('‚ùå Notification: Error details:', error.message);
    console.error('‚ùå Notification: Error stack:', error.stack);
    return null;
  }
}

// –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ –≥–æ—Ä–æ–¥—É
export async function getVacanciesByCity(city: string): Promise<FirestoreVacancy[]> {
  try {
    const vacanciesQuery = query(
      collection(db, COLLECTIONS.VACANCIES),
      where('status', '==', 'active'),
      where('location', '==', city),
      orderBy('createdAt', 'desc')
    );

    const snapshot = await getDocs(vacanciesQuery);
    const vacancies = snapshot.docs.map(doc => ({
      id: doc.id,
      ...doc.data()
    }));

    return vacancies.map(processVacancyForClient);
  } catch (error) {
    console.error('Error fetching vacancies by city:', error);
    return [];
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π
export async function getPopularVacancies(count = 5): Promise<FirestoreVacancy[]> {
  try {
    // –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –±–µ–∑ —Å–ª–æ–∂–Ω–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    const snapshot = await getDocs(collection(db, COLLECTIONS.VACANCIES));
    const vacancies = snapshot.docs.map(doc => ({
      id: doc.id,
      ...doc.data()
    }))
    .filter((vacancy: any) => vacancy.status === 'active' || !vacancy.status)
    .sort((a: any, b: any) => (b.viewCount || 0) - (a.viewCount || 0))
    .slice(0, count);

    return vacancies.map(processVacancyForClient);
  } catch (error) {
    console.error('Error fetching popular vacancies:', error);
    return [];
  }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é
export async function submitApplication(application: Omit<Application, 'id' | 'createdAt'>): Promise<string> {
  try {
    const docRef = await addDoc(collection(db, COLLECTIONS.APPLICATIONS), {
      ...application,
      createdAt: Timestamp.now(),
      status: 'new'
    });

    return docRef.id;
  } catch (error) {
    console.error('Error submitting application:', error);
    throw new Error('Failed to submit application');
  }
}
