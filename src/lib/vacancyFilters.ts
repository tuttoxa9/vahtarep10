import type { FirestoreVacancy } from "@/types";
import type { FilterState } from "@/components/vacancies/VacancyFilters";

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —á–∏—Å–ª–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –∑–∞—Ä–ø–ª–∞—Ç—ã
function extractSalaryValue(salary: unknown): { min: number; max: number } {
  if (typeof salary === "number") {
    return { min: salary, max: salary };
  }

  if (typeof salary === "object" && salary !== null) {
    return {
      min: salary.min || 0,
      max: salary.max || salary.min || 0,
    };
  }

  if (typeof salary === "string") {
    // –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á—å —á–∏—Å–ª–∞ –∏–∑ —Å—Ç—Ä–æ–∫–∏
    const numbers = salary.match(/\d+/g);
    if (numbers && numbers.length > 0) {
      const nums = numbers.map(n => Number.parseInt(n, 10));
      return {
        min: Math.min(...nums),
        max: Math.max(...nums),
      };
    }
  }

  return { min: 0, max: 0 };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
function normalizeSearchText(text: string): string {
  return text
    .toLowerCase()
    .replace(/—ë/g, '–µ')
    .replace(/[^–∞-—è\s\w]/g, ' ')
    .replace(/\s+/g, ' ')
    .trim();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–π
export function filterVacancies(
  vacancies: FirestoreVacancy[],
  filters: FilterState
): FirestoreVacancy[] {
  let filtered = [...vacancies];

  // –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É
  if (filters.search.trim()) {
    const searchTerms = normalizeSearchText(filters.search).split(' ');
    filtered = filtered.filter(vacancy => {
      const searchableText = normalizeSearchText([
        vacancy.title,
        vacancy.company,
        vacancy.description || '',
        vacancy.location,
        vacancy.experience || '',
        vacancy.employment_type || ''
      ].join(' '));

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Å–ª–æ–≤–∞ –ø–æ–∏—Å–∫–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ —Ç–µ–∫—Å—Ç–µ
      return searchTerms.every(term =>
        term.length > 0 && searchableText.includes(term)
      );
    });
  }

  // –§–∏–ª—å—Ç—Ä –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∑–∞—Ä–ø–ª–∞—Ç–µ
  if (filters.salaryMin) {
    const minSalary = Number.parseInt(filters.salaryMin, 10);
    if (!Number.isNaN(minSalary)) {
      filtered = filtered.filter(vacancy => {
        const { max } = extractSalaryValue(vacancy.salary);
        return max >= minSalary;
      });
    }
  }

  // –§–∏–ª—å—Ç—Ä –ø–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –∑–∞—Ä–ø–ª–∞—Ç–µ
  if (filters.salaryMax) {
    const maxSalary = Number.parseInt(filters.salaryMax, 10);
    if (!Number.isNaN(maxSalary)) {
      filtered = filtered.filter(vacancy => {
        const { min } = extractSalaryValue(vacancy.salary);
        return min <= maxSalary;
      });
    }
  }

  // –§–∏–ª—å—Ç—Ä –ø–æ –ª–æ–∫–∞—Ü–∏–∏
  if (filters.location.trim()) {
    const locationTerm = filters.location.toLowerCase().trim();
    filtered = filtered.filter(vacancy =>
      vacancy.location.toLowerCase().includes(locationTerm)
    );
  }

  // –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É –∑–∞–Ω—è—Ç–æ—Å—Ç–∏
  if (filters.employmentType && filters.employmentType !== "all") {
    filtered = filtered.filter(vacancy => {
      const vacancyType = vacancy.employment_type?.toLowerCase() || '';
      const filterType = filters.employmentType.toLowerCase();

      // –¢–æ—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∏–ª–∏ –≤–∫–ª—é—á–µ–Ω–∏–µ
      return vacancyType === filterType || vacancyType.includes(filterType);
    });
  }

  // –§–∏–ª—å—Ç—Ä –ø–æ –æ–ø—ã—Ç—É
  if (filters.experience && filters.experience !== "all") {
    const beforeCount = filtered.length;
    filtered = filtered.filter(vacancy => {
      const vacancyExperience = vacancy.experience?.toLowerCase() || '';
      const filterExperience = filters.experience.toLowerCase();

      console.log(`üéØ Checking experience: "${vacancyExperience}" vs filter "${filterExperience}"`);

      // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞ "–±–µ–∑ –æ–ø—ã—Ç–∞"
      if (filterExperience === "–±–µ–∑ –æ–ø—ã—Ç–∞") {
        const result = (
          vacancyExperience.includes("–±–µ–∑ –æ–ø—ã—Ç–∞") ||
          vacancyExperience.includes("–æ–ø—ã—Ç –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è") ||
          vacancyExperience.includes("–Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–ø—ã—Ç") ||
          vacancyExperience.includes("–ø–æ–¥–æ–π–¥–µ—Ç –±–µ–∑ –æ–ø—ã—Ç–∞") ||
          vacancyExperience.includes("–æ–ø—ã—Ç –Ω–µ –Ω—É–∂–µ–Ω") ||
          vacancyExperience.includes("–Ω–æ–≤–∏—á–∫–∞–º") ||
          vacancyExperience.includes("0 –ª–µ—Ç") ||
          vacancyExperience === "" ||
          vacancyExperience === "–Ω–µ—Ç" ||
          vacancyExperience === "–Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è"
        );
        console.log(`   ‚úì No experience check result: ${result}`);
        return result;
      }

      // –õ–æ–≥–∏–∫–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞ "–æ—Ç X –ª–µ—Ç"
      if (filterExperience.includes("–æ—Ç")) {
        // –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ –ª–µ—Ç –∏–∑ —Ñ–∏–ª—å—Ç—Ä–∞
        const filterYears = filterExperience.match(/\d+/);
        if (filterYears) {
          const requiredYears = Number.parseInt(filterYears[0], 10);

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∫–ª—é—á–∞–µ—Ç –ª–∏ —Ç–µ–∫—Å—Ç –ø–æ—Ö–æ–∂–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
          const result = (
            vacancyExperience.includes(filterExperience) ||
            vacancyExperience.includes(`–æ—Ç ${requiredYears}`) ||
            vacancyExperience.includes(`${requiredYears} –ª–µ—Ç`) ||
            vacancyExperience.includes(`${requiredYears} –≥–æ–¥–∞`) ||
            vacancyExperience.includes(`${requiredYears}+`) ||
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∏—Å–ª–∞ –≤ —Ç–µ–∫—Å—Ç–µ –æ–ø—ã—Ç–∞
            (() => {
              const experienceNumbers = vacancyExperience.match(/\d+/g);
              if (experienceNumbers) {
                return experienceNumbers.some(num => Number.parseInt(num, 10) >= requiredYears);
              }
              return false;
            })()
          );
          console.log(`   ‚úì Experience years check result: ${result}`);
          return result;
        }
      }

      // –û–±—â–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
      const result = vacancyExperience.includes(filterExperience);
      console.log(`   ‚úì General experience check result: ${result}`);
      return result;
    });
    console.log(`üéØ Experience filter: ${beforeCount} ‚Üí ${filtered.length}`);
  }

  console.log('‚úÖ Final filtered count:', filtered.length);
  return filtered;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –≤–∞–∫–∞–Ω—Å–∏–π
export function sortVacancies(
  vacancies: FirestoreVacancy[],
  sortBy: string
): FirestoreVacancy[] {
  const sorted = [...vacancies];

  switch (sortBy) {
    case "date":
      return sorted.sort((a, b) => {
        const dateA = new Date(a.createdAt).getTime();
        const dateB = new Date(b.createdAt).getTime();
        return dateB - dateA; // –ù–æ–≤—ã–µ –ø–µ—Ä–≤—ã–º–∏
      });

    case "salary":
      return sorted.sort((a, b) => {
        const salaryA = extractSalaryValue(a.salary);
        const salaryB = extractSalaryValue(b.salary);
        const avgA = (salaryA.min + salaryA.max) / 2;
        const avgB = (salaryB.min + salaryB.max) / 2;
        return avgB - avgA; // –í—ã—Å–æ–∫–∏–µ –∑–∞—Ä–ø–ª–∞—Ç—ã –ø–µ—Ä–≤—ã–º–∏
      });

    case "views":
      return sorted.sort((a, b) => {
        const viewsA = a.viewCount || 0;
        const viewsB = b.viewCount || 0;
        return viewsB - viewsA; // –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–µ—Ä–≤—ã–º–∏
      });

    default:
      return sorted;
  }
}

// –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
export function filterAndSortVacancies(
  vacancies: FirestoreVacancy[],
  filters: FilterState
): FirestoreVacancy[] {
  const filtered = filterVacancies(vacancies, filters);
  return sortVacancies(filtered, filters.sortBy);
}
